import { Readable } from 'stream';
import { unlinkSync, writeFileSync } from 'fs';
import { config } from 'dotenv';
import wretch from 'wretch';
import { createStreamFromFile, jsonStreamify, streamToString } from '../src/index';

// Load environment variables from .env file
config();

// Validate and extract required environment variables
function getRequiredEnvVar(name: string): string {
  const value = process.env[name];
  if (!value) {
    throw new Error(
      `Missing required environment variable: ${name}. ` +
        'Please set it in your .env file or environment. ' +
        'See .env.example for configuration template.'
    );
  }
  return value;
}

// SparkPost API configuration
const SPARKPOST_API_KEY = getRequiredEnvVar('SPARKPOST_API_KEY');
const SPARKPOST_BASE_URL = process.env.SPARKPOST_BASE_URL || 'https://api.sparkpost.com/api/v1';
const SPARKPOST_API_URL = `${SPARKPOST_BASE_URL}/transmissions`;

// Email configuration from environment
const TEST_EMAIL = getRequiredEnvVar('TEST_EMAIL');
const FROM_EMAIL = getRequiredEnvVar('FROM_EMAIL');
const FROM_NAME = getRequiredEnvVar('FROM_NAME');

interface SparkPostAttachment {
  name: string;
  type: string;
  data: string | Readable; // Base64 encoded content or stream (before conversion)
}

interface SparkPostTransmission {
  options: {
    sandbox: boolean;
  };
  content: {
    from: {
      name: string;
      email: string;
    };
    subject: string;
    html: string;
    text?: string;
    attachments?: SparkPostAttachment[];
  };
  recipients: Array<{
    address: {
      name?: string;
      email: string;
    };
  }>;
}

function createSampleAttachments() {
  console.log('üìé Creating sample attachment files...');

  // Create a sample PDF-like document
  const pdfContent = Buffer.from(`%PDF-1.4
1 0 obj
<<
/Type /Catalog
/Pages 2 0 R
>>
endobj

2 0 obj
<<
/Type /Pages
/Kids [3 0 R]
/Count 1
>>
endobj

3 0 obj
<<
/Type /Page
/Parent 2 0 R
/MediaBox [0 0 612 792]
/Contents 4 0 R
>>
endobj

4 0 obj
<<
/Length 44
>>
stream
BT
/F1 12 Tf
100 700 Td
(Hello from json-streamify!) Tj
ET
endstream
endobj

xref
0 5
0000000000 65535 f 
0000000015 00000 n 
0000000074 00000 n 
0000000120 00000 n 
0000000179 00000 n 
trailer
<<
/Size 5
/Root 1 0 R
>>
startxref
225
%%EOF`);

  writeFileSync('sample-document.pdf', pdfContent);

  // Create a sample CSV file
  const csvContent = `Name,Email,Age
John Doe,john@example.com,30
Jane Smith,jane@example.com,25
Bob Johnson,bob@example.com,35`;

  writeFileSync('sample-data.csv', csvContent);

  console.log('‚úÖ Sample attachments created: sample-document.pdf, sample-data.csv\n');
}

async function sendEmailWithAttachments() {
  console.log('üìß Preparing SparkPost email with attachments...\n');

  createSampleAttachments();

  // Create the transmission payload with file streams
  const transmission = {
    options: {
      sandbox: false, // Use sandbox mode for testing
    },
    content: {
      from: {
        name: FROM_NAME,
        email: FROM_EMAIL,
      },
      subject: 'Email with Attachments via json-streamify',
      html: `
        <html>
          <body>
            <h2>json-streamify Email Demo</h2>
            <p>This email was sent using the SparkPost Transmissions API with attachments that were automatically converted from file streams to Base64 encoding.</p>
            
            <h3>Included Attachments:</h3>
            <ul>
              <li><strong>sample-document.pdf</strong> - A sample PDF document</li>
              <li><strong>sample-data.csv</strong> - Sample CSV data</li>
              <li><strong>generated-report.txt</strong> - A dynamically generated text file</li>
            </ul>
            
            <p>The json-streamify library automatically handled the Base64 encoding of all file streams, making it easy to include binary attachments in JSON API requests.</p>
            
            <hr>
            <p><small>Generated by json-streamify example</small></p>
          </body>
        </html>
      `,
      text: `json-streamify Email Demo

This email was sent using the SparkPost Transmissions API with attachments that were automatically converted from file streams to Base64 encoding.

Included Attachments:
- sample-document.pdf: A sample PDF document  
- sample-data.csv: Sample CSV data
- generated-report.txt: A dynamically generated text file

The json-streamify library automatically handled the Base64 encoding of all file streams.

Generated by json-streamify example`,
      attachments: [
        {
          name: 'sample-document.pdf',
          type: 'application/pdf',
          data: createStreamFromFile('sample-document.pdf'),
        },
        {
          name: 'sample-data.csv',
          type: 'text/csv',
          data: createStreamFromFile('sample-data.csv'),
        },
        {
          name: 'generated-report.txt',
          type: 'text/plain',
          data: Readable.from([
            Buffer.from(`Generated Report
=================

Date: ${new Date().toISOString()}
Library: json-streamify
Demo: SparkPost Integration

This file was generated in-memory and streamed directly to the email attachment without being written to disk.

Key Benefits:
- Memory efficient file handling
- Automatic Base64 encoding
- Seamless API integration
- No temporary file management

File generated at runtime.`),
          ]),
        },
      ],
    },
    recipients: [
      {
        address: {
          name: 'Test Recipient',
          email: TEST_EMAIL,
        },
      },
    ],
  } satisfies SparkPostTransmission;

  console.log('üîÑ Converting transmission data with json-streamify...');

  // Use json-streamify to convert the transmission object
  // File streams in attachments[].data will be automatically converted to Base64
  const jsonStream = jsonStreamify(transmission, null, 2);
  const jsonString = await streamToString(jsonStream);

  console.log('üìä Transmission statistics:');
  console.log(`   JSON payload size: ${jsonString.length} characters`);
  console.log(`   Number of attachments: ${transmission.content.attachments?.length || 0}`);

  // Parse the result to see the Base64 conversion
  const parsedTransmission = JSON.parse(jsonString) as {
    content: {
      attachments?: Array<{
        name: string;
        type: string;
        data: string;
      }>;
    };
  };

  console.log('\nüîç Attachment conversion results:');
  parsedTransmission.content.attachments?.forEach((attachment, index) => {
    const base64Length = attachment.data.length;
    const estimatedFileSize = Math.round((base64Length * 3) / 4);
    console.log(`   ${index + 1}. ${attachment.name}`);
    console.log(`      Type: ${attachment.type}`);
    console.log(`      Base64 length: ${base64Length} characters`);
    console.log(`      Estimated file size: ${estimatedFileSize} bytes`);
  });

  console.log('\nüåê Sending request to SparkPost API...');

  try {
    const result = await wretch(SPARKPOST_API_URL)
      .headers({
        Authorization: SPARKPOST_API_KEY,
        'Content-Type': 'application/json',
      })
      .body(jsonString)
      .post()
      .json<{
        results: {
          total_rejected_recipients: number;
          total_accepted_recipients: number;
          id: string;
        };
      }>();

    console.log('‚úÖ Email sent successfully!');
    console.log('üìã SparkPost response:');
    console.log(`   Transmission ID: ${result.results.id}`);
    console.log(`   Accepted recipients: ${result.results.total_accepted_recipients}`);
    console.log(`   Rejected recipients: ${result.results.total_rejected_recipients}`);
  } catch (error) {
    console.error('‚ùå Email send failed:', error);
    throw error;
  }
}

async function main() {
  try {
    console.log('üöÄ json-streamify SparkPost Email Demo\n');

    await sendEmailWithAttachments();

    console.log('\nüéâ Demo completed successfully!');
    console.log('   - File streams were automatically converted to Base64');
    console.log('   - Email with attachments was prepared for SparkPost API');
    console.log('   - All file handling was done in-memory with streams');

    // Clean up sample files
    console.log('\nüßπ Cleaning up sample files...');
    try {
      unlinkSync('sample-document.pdf');
      unlinkSync('sample-data.csv');
      console.log('‚úÖ Cleanup completed');
    } catch {
      // Ignore cleanup errors
    }
  } catch (error) {
    console.error('‚ùå Demo failed:', error);

    if (error instanceof Error && error.message.includes('Missing required environment variable')) {
      console.log('\nüí° Configuration help:');
      console.log('   1. Copy .env.example to .env: cp .env.example .env');
      console.log('   2. Edit .env with your configuration:');
      console.log('      - SPARKPOST_API_KEY: Get from https://app.sparkpost.com/account/api-keys');
      console.log('      - TEST_EMAIL: Email address to send test to');
      console.log('      - FROM_EMAIL: Your verified sending domain email');
      console.log('      - FROM_NAME: Display name for sender');
    }

    process.exit(1);
  }
}

void main();
